csv = "catalog_v2.csv"
def ingresar_datos(archivo):
    levelType = input("Ingrese el levelType: ")
    code = input("Ingrese el code:  ")
    catalogType = input("Ingrese el catalogType:  ")
    name = input("Ingrese el name : ")
    description = input("Ingrese la descripción: ")
    sourceLink = input("Ingrese el sourceLink")
    nuevo_registro = levelType + "," + code + "," + catalogType + "," + name + "," + description + "," + sourceLink + "\n"
    arch = open(archivo, "+a")
    arch.write(nuevo_registro)
    arch.close()
    return archivo

def mostrar_repositorio(archivo):
    arch = open(archivo, "r")
    for reg in arch.readlines():
        lista = reg.split(",")
        print("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        espacios = " " * (18 - (len(lista[0])))
        ren = lista[0] + espacios
        espacios = " " * (28 - (len(lista[1])))
        ren += lista[1] + espacios
        espacios = " " * (25 - (len(lista[2])))
        ren += lista[2] + espacios
        espacios = " " * (27 - (len(lista[3])))
        ren += lista[3] + espacios
        espacios = " " * (47 - (len(lista[4])))
        ren += lista[4] + espacios
        ren += " " + lista[5]
        print(ren, end="")


def remover_datos(archivo):
    op = int(input(" Ingresa el numero del valor que tiene: \n1) levelType \n 2)  code  \n  3) catalogType  \n 4) name  \n 5) description  \n  6) sourceLink \n"))
    code = input("Ingresa el link:  ")
    arreglo = []
    arch = open(archivo, "r")
    for reg in arch.readlines():
        lista = reg.split(",")
        if lista[(op - 1)] == code:
            arreglo.append(lista)
    if len(arreglo) == 0:
        print("No existe o hubo un error al introducir el codigo")
    else:
        print(" # |levelType|  |code|       |catalogType|  |  name  |   |description|   |sourceLink|")
        #      12345678912  123456       1234567891234  1234567891 1234567891234 123456789123
        print("-------------------------------------------------------------------------------")
        cont = 0
        for linea in arreglo:
            cont += 1
            # TODO: Mostrar su numero
            espacios = " " * (18 - (len(lista[0])))
            ren = str(cont) + " " + linea[0] + espacios
            espacios = " " * (28 - (len(lista[1])))
            ren += linea[1] + espacios
            espacios = " " * (25 - (len(lista[2])))
            ren += linea[2] + espacios
            espacios = " " * (27 - (len(lista[3])))
            ren += linea[3] + espacios
            espacios = " " * (47 - (len(lista[4])))
            ren += linea[4] + espacios
            # espacios=" "*(2-len(lista[6]))
            ren += linea[5]
            print(ren, end="")
        # TODO: Verificar que este rango
        filaDel = int(input("Cual Registro Desea borrar?"))
        fila -= 1
        filebuffer = ""
        for reg in registros:
            lista = reg.split(",")
            if lista[(op - 1)] == code:
                if fila != 0:
                  fila -= 1
                  filebuffer += reg
                else:
                  lista[] = filaDel
                  isFirst = True
                  for campo in lista:
                    if not isFirst:
                      isFirst = False
                      filebuffer += ","
                    filebuffer += campo
                  fila -= 1
            else:
                filebuffer += reg


        arch = open("test.csv", "w")
        arch.write(filebuffer)
        arch.close()            
            
        
    #TODO: Seleccion de registro especifico
    arch.close()
    if existencia == True:
        with open(archivo,"w") as arch:
            #TODO: Ingresar en nuevo archivo y realizar el filtrado del eliminado
            for reg in lista:
                arch.write(reg)
        arch.close()
    else:
        print("No se encuentra el archivo")

def modificar_datos(archivo):
    op = int(input(
        " Ingresa el numero del valor que tiene: \n1) levelType \n 2)  code  \n  3) catalogType  \n 4) name  \n 5) description  \n  6) sourceLink \n"))
    code = input("Ingresa el codigo:  ")
    arreglo = []
    arch = open(archivo, "r")
    registros = arch.readlines()
    for reg in registros:
        lista = reg.split(",")
        if lista[(op - 1)] == code:
            arreglo.append(lista)
    if len(arreglo) == 0:
        print("No existe o hubo un error al introducir el codigo")
    else:
        print(" # |levelType|  |code|       |catalogType|  |  name  |   |description|   |sourceLink|")
        print("-------------------------------------------------------------------------------")
        cont = 0
        for linea in arreglo:
            cont += 1
            # TODO: Mostrar su numero
            espacios = " " * (18 - (len(lista[0])))
            ren = str(cont) + " " + linea[0] + espacios
            espacios = " " * (28 - (len(lista[1])))
            ren += linea[1] + espacios
            espacios = " " * (25 - (len(lista[2])))
            ren += linea[2] + espacios
            espacios = " " * (27 - (len(lista[3])))
            ren += linea[3] + espacios
            espacios = " " * (47 - (len(lista[4])))
            ren += linea[4] + espacios
            ren += linea[5]
            print(ren, end="")
        # TODO: Verificar que este rango
        fila = int(input("Cual Registro Desea Modificar?"))
        numCampo = int(input(" Ingresa el numero del campo a modificar: \n1) levelType \n 2)  code  \n  3) catalogType  \n 4) name  \n 5) description  \n  6) sourceLink \n"))
        # Comprobacion Correcta
        fila -= 1
        modCampo = input("Con que se va a sustituir: ")
        filebuffer = ""
        for reg in registros:
            lista = reg.split(",")
            if lista[(op - 1)] == code:
                if fila != 0:
                  fila -= 1
                  filebuffer += reg
                else:
                  lista[numCampo-1] = modCampo
                  isFirst = True
                  count=0 
                  for campo in lista:
                    count+=1
                    if count == len(lista):
                        filebuffer += campo
                        filebuffer += "\n"
                        break
                    if not isFirst: 
                      isFirst = False
                      filebuffer += ","
                    filebuffer += campo+ ","
                    
                  fila -= 1
            else:
                filebuffer += reg  


        arch = open("test.csv", "w")
        arch.write(filebuffer)
        arch.close()

def consultar_datos(archivo):
    op = int(input(
        " Ingresa el numero del valor que tiene: \n1) levelType \n 2)  code  \n  3) catalogType  \n 4) name  \n 5) description  \n  6) sourceLink \n"))
    code = input("Ingresa el codigo:  ")
    arreglo = []
    # TODO: conteo de  nulos totales
    arch = open(archivo, "r")
    for reg in arch.readlines():
        lista = reg.split(",")
        if lista[(op - 1)] == code:
            arreglo.append(lista)
    if len(arreglo) == 0:
        print("No existe o hubo un error al introducir el codigo")
    else:
        print("|levelType|  |code|       |catalogType|  |  name  |   |description|   |sourceLink|")
        print("-------------------------------------------------------------------------------")
        for linea in arreglo:
            espacios = " " * (18 - (len(lista[0])))
            ren = linea[0] + espacios
            espacios = " " * (28 - (len(lista[1])))
            ren += linea[1] + espacios
            espacios = " " * (25 - (len(lista[2])))
            ren += linea[2] + espacios
            espacios = " " * (27 - (len(lista[3])))
            ren += linea[3] + espacios
            espacios = " " * (47 - (len(lista[4])))
            ren += linea[4] + espacios
            ren += linea[5]
            print(ren, end="")
        #Recorrido comprobar registrs
        nullCount = [0] * 6
        qnttyCampos = len(arreglo[0])
        qnttyRegistros = len(arch.readlines()) -1
        for registro in arreglo:
          containsAlpha = False
          OnlyNumeric = True
          OnlyAlfa = True
          containsSpecial = False
          for campo in registro:
            if(campo == None or len(campo) == 0):
              nullCount[registro.index(campo)] +=1
            else:
              OnlyNumeric = campo.isnumeric() and OnlyNumeric
              OnlyAlfa = campo.isalpha() and OnlyAlfa
              containsAlpha = campo.isalnum() or containsAlpha
              if not containsSpecial:
                for char in campo:
                  if not char.isalnum():
                    containsSpecial = True
                    break
        print("-----------------------------------------------------------------------------------------------------------------------------------------------------------")
        print(f"Contiene numeros ? : {OnlyNumeric}| Continene alfanumericos ?:  {OnlyAlfa}|Contiene alfabeticos ? : {containsAlpha}| Contiene  caracteres especiales ?:{containsSpecial}")
        print("-----------------------------------------------------------------------------------------------------------------------------------------------------------")
        print(f" La distribución de espacios vacios en el registro de 6 campos es  {nullCount}")
        #print("-----------------------------------------------------------------------------------------------------------------------------------------------------------")
        #print(f"Número de registros encontrados {qnttyRegistros}")
        print("-----------------------------------------------------------------------------------------------------------------------------------------------------------")
        print(f"Contiene {qnttyCampos-1} campos ")


def menu():
    op = (input('''A.    Mostrar el detalle del repositorio. \n
                   B.    Buscar un registro de datos. \n
                   C.    Consulta un conjunto de registros. \n
                   D.    Modificar data existente.\n
                   E.    Ingresar un nuevo registro de datos.\n
                   F.    Remover un registro de datos existente.\n
                   G.    Finalizar.'''))

    if op == chr(75) or op == chr(97):
        mostrar_repositorio(csv)
    if op == chr(66) or op == chr(98):
        consultar_datos(csv)
    if op == chr(67) or op == chr(99):
        modificar_datos(csv)
    if op == chr(68) or op == chr(100):
        modificar_datos(csv)
    if op == chr(69) or op == chr(101):
        ingresar_datos(csv)
    if op == chr(70) or op == chr(102):
        remover_datos(csv)
    if op == chr(71) or op == chr(103):
        return False

def detalle_del_repo(archivo):
    count_rows= 0
    count_cols = 0
    arch = open(archivo, "r")
    for reg in arch.readlines():
        count_rows +=1
        lista = reg.split(",")
        for elemento in lista:
            count_cols +=1
    print("Numero de columnas del repositorio es  ", ((count_cols//count_rows)))
    print("Numero de registros del repositorio es ", count_rows)

def main():
    modificar_datos(csv)
    
if __name__ == "__main__":
    main()
